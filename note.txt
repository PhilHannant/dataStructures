Stack = depth first
Queue = breadth first

BST
A data structure is required for storing a set of integers such that each of the following operations can be done in (log n) time, where n is the number of elements in the set.
   o	Delection of the smallest element
   o	Insertion of an element if it is not already present in the set

Recursion = FILO

Divide and conquer
Binary search - worst O(log n), best O(1), ave O(log n)
- input element x with middle element of the array, if = return index of middle, else if x < middle, then recurs for left side of middle element, else recurs for right side of middle element.
quicksort - worst (On^2), best O(n), ave O (n log n)
- The algorithm picks a pivot element, rearranges the array elements in such a way that all elements smaller than the picked pivot element move to left side of pivot, and all greater elements move to right side. Finally, the algorithm recursively sorts the subarrays on left and right of pivot element.
merge sort - o (n log n) for all
- is also a sorting algorithm. The algorithm divides the array in two halves, recursively sorts them and finally merges the two sorted halves.

